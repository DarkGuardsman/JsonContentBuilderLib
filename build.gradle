buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath "org.ajoberstar:grgit:2.1.0"
    //classpath "se.bjurr.gitchangelog:git-changelog-gradle-plugin:+"
    classpath "org.ajoberstar:grgit:2.1.0"
  }
}

plugins {
  id "se.bjurr.gitchangelog.git-changelog-gradle-plugin" version "1.60"
}

apply plugin: "org.ajoberstar.grgit"
apply plugin: 'java'
//apply from: 'https://raw.githubusercontent.com/BuiltBrokenModding/BuiltBrokenScripts/universal/index/index-nonmc.gradle'
//apply plugin: 'se.bjurr.gitchangelog.git-changelog-gradle-plugin'
apply plugin: "org.ajoberstar.grgit"

repositories {
    mavenCentral()
    jcenter()
}


dependencies {
    implementation 'com.google.guava:guava:11.0.2'
    implementation 'com.google.code.gson:gson:2.8.5'
    testImplementation('org.junit.jupiter:junit-jupiter:5.4.2')
}

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

//Adds variable for getting build numbers       
ext.getBuildNumber = {
    //Jenkins support
    if (System.getenv("BUILD_NUMBER") != null) 
    {
        return "${System.getenv("BUILD_NUMBER")}"
    }
    else if (project.hasProperty("bambooBuildNumber")) 
    {
        return project.bambooBuildNumber
    }
    //Drone IO support
    else if (System.getenv("DRONE_BUILD_NUMBER") != null) 
    {
        return "${System.getenv("DRONE_BUILD_NUMBER")}"
    }
    //Travis-CI support
    else if (System.getenv("TRAVIS_BUILD_NUMBER") != null) 
    {
        return "${System.getenv("TRAVIS_BUILD_NUMBER")}"
    }
    else if (project.hasProperty("sbmBuild"))
    {
        return project.sbmBuild
    }
    return getDate()
}

import org.ajoberstar.grgit.*

ext.GitHash = {
    //return gitHash()
    def gitHash = 'unknown'
    if (new File(projectDir, '.git').exists()) {
    def repo = Grgit.open(currentDir: file('.'))
  }
}

version = "${version_major}.${version_minor}.${version_revis}b" + project.getBuildNumber()

//prints the version to the console
println "version = "+ version

//Grabs the archivebase and prints the version to the root of the project directory.
file("${archivebase}.txt").text = version;

if (!project.hasProperty("bambooshortPlanName"))
    ext.bambooshortPlanName = ""

apply from: 'https://raw.githubusercontent.com/BuiltBrokenModding/BuiltBrokenScripts/universal/scripts/both/printdeps.gradle'

javadoc {
    source = sourceSets.main.allJava
}


ext.CurrentJVM = {
    def currentJvm = org.gradle.internal.jvm.Jvm.current()
}

def currentJvm = org.gradle.internal.jvm.Jvm.current()
println "Current Java version = " + currentJvm

/*
Creats a shared Manifest for each jar to prevent copy and paste stuff.

*/
if (project.hasProperty("coremod"))
    {
    ext.sharedManifest = manifest {
    attributes("Built-By": System.getProperty('user.name'),
               "Created-By": project.CurrentJVM,
               "Implementation-Title": archivesBaseName,
               "Implementation-Version": version,
               "Git-Hash": ext.GitHash,
               "FMLCorePlugin": coremod,
               "FMLCorePluginContainsFMLMod": "true")
    }
}
else
{
    ext.sharedManifest = manifest {
    attributes("Built-By": System.getProperty('user.name'),
               "Created-By": project.CurrentJVM,
               "Implementation-Title": archivesBaseName,
               "Implementation-Version": version,
               "Git-Hash": ext.GitHash)
    }
}

task javadocJar(type: Jar, dependsOn: 'javadoc') {
     from javadoc.destinationDir
     if (project.getProperty("bambooshortPlanName") == "BBM-Dev") classifier = "javadoc-dev"
     else classifier = "javadoc"
     //sets where the jars go to.
     destinationDir = file 'output'
     mustRunAfter "sourceMainScala"
}

task deobfJar(type: Jar) {
     from sourceSets.main.output
     //if project name is BBM-Dev it makes the deobf jar deobf-dev if not its just deobf
     if (project.getProperty("bambooshortPlanName") == "BBM-Dev") classifier = "deobf-dev"
     else classifier = "deobf"
     //sets where the jars go to.
     destinationDir = file 'output'
     manifest = project.manifest {
        from sharedManifest
    }
     mustRunAfter "jar" 
}

task sourcesJar(type: Jar) {
     from sourceSets.main.allJava
     if (project.getProperty("bambooshortPlanName") == "BBM-Dev") classifier = "src-dev"
     else classifier = "src"
     //sets where the jars go to.
     destinationDir = file 'output'
     manifest = project.manifest {
        from sharedManifest
     }
     mustRunAfter "jar"
}

//copies the build.properties to the output dir for maven publishing.
task copyBuildXml(type: Copy) {
     from 'gradle.properties'
     into 'output'
}

jar {
     dependsOn copyBuildXml, printDeps
     //if project has the property BBM-Dev then it appends dev to indicate the dev branch
     /*if (project.getProperty("bambooshortPlanName") == "BBM-Dev") classifier = "dev-universal"
     else classifier = "universal"*/
     //sets where the jars go to.
     destinationDir = file 'output'
     manifest = project.manifest {
        from sharedManifest
     
     }
}
tasks.build.dependsOn deobfJar
test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

task makeChangelog(type: se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask) {
    //filePath = "changelog.html"
    file = new File("changelog.html");
    untaggedName = "Current release ${project.version}"
    fromCommit = startGitRev
    toRef =  "HEAD"
    templateContent = """
{{#tags}}
<h1> Highly untested and may break world</h1>
  <h3>{{name}}</h3>
  <ul>
    {{#commits}}
    <li> <a href="https://github.com/{{ownerName}}/{{repoName}}/commit/{{hash}}" target=_blank> {{{message}}}</a>
</li>
    {{/commits}}
  </ul>
{{/tags}}
"""
}

if (project.hasProperty("bambooshortPlanName") && project.getProperty("bambooshortPlanName") == "BM-Dev")
{
    group = "dev.${org}.${groupid}"
    archivesBaseName = "${archivebase}"
} else {
    group = "com.${org}.${groupid}"
    archivesBaseName = "${archivebase}"
}

apply plugin: 'maven-publish'
publishing {
    publications {
        mavenJava(MavenPublication)
        {
            artifact jar
            //checks if minecraft is in the project.
            if (project.hasProperty("minecraft"))
            artifact deobfJar
            artifact("output/gradle.properties") {
                classifier "gradle"
                extension "properties"
            }
            //checks if minecraft is in the project.
            if (project.hasProperty("minecraft"))
            artifact ("CompiledWith.txt") {
                classifier "CompiledWith"
                extension "txt"
            }
            /*/*if (project.hasProperty("bambooBuildNumber"))
            artifact ("changelog.xml") {
                classifier "changelog"
                extension "xml"
            }*/
            artifact ("changelog.html"){
                classifier "changelog"
                extension "html"
            }
            //checks if the archivebase matches VoltzEngine. Will break if name is changed.
            if (project.hasProperty("archivebase") && project.getProperty("archivebase") == "VoltzEngine")
            artifact apiZip
            if (project.hasProperty("archivebase") && project.getProperty("archivebase") == "VoltzEngine")
            artifact templetesZip
            //from components.java
            //prints the current date to the pom file.
            pom.withXml {
                asNode().appendNode('description', 'Created on ' + getDate())
            }
        }
}

    repositories {
        maven {
        //checks for a the local property as a gradle argument and if exists outputs to a local dir.
            if (project.hasProperty("local") && project.getProperty("local") == "true")
                url "file:" + projectDir.path + "/build/maven"
            else
                url "file:///home/services/dmod/maven"
        }
    }
}

tasks.build.dependsOn makeChangelog

def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMddHHmmss')
    return formattedDate
}